# -*- coding: utf-8 -*-
# generators/pydantic_generator.py

import json
from typing import Optional, List

from datamodel_code_generator import DataModelType, PythonVersion
from datamodel_code_generator.model import get_data_model_types
from datamodel_code_generator.parser.jsonschema import JsonSchemaParser

from ..models.ir import IRModel
from ..exceptions import GenerationError

class PydanticGenerator:
    """ Act as a generator to produce Pydantic models from data contracts defined in the IR. """
    @staticmethod
    def generate(ir: IRModel) -> Optional[str]:
        """Generate Pydantic models from the aggregated contracts in the IR."""
        if not ir.aggregated_contracts:
            return None

        model_definitions: List[str] = []

        data_model_types = get_data_model_types(
            DataModelType.PydanticV2BaseModel,
            target_python_version=PythonVersion.PY_39
        )

        for contract in ir.aggregated_contracts.values():
            try:
                # datamodel-code-generator 需要字符串或文件路径作为输入
                schema_str = json.dumps(contract.data)

                # 初始化解析器
                parser = JsonSchemaParser(
                    schema_str,
                    data_model_type=data_model_types.data_model,
                    data_model_root_type=data_model_types.root_model,
                    data_model_field_type=data_model_types.field_model,
                    data_type_manager_type=data_model_types.data_type_manager,
                )
                
                result = parser.parse()
                if isinstance(result, str):
                    model_definitions.append(result)
                else:
                    raise GenerationError(
                        f"Unexpected result type from parser for contract '{contract.id}'"
                    )

            except Exception as e:
                raise GenerationError(
                    f"Failed to generate model for contract '{contract.id}': {e}"
                ) from e
            
        file_header = f"""# -*- coding: utf-8 -*-
                    # Auto-generated by Prism
                    # Source Recipe: {ir.source_recipe_meta.id}
                    """
        full_content = file_header + "\n\n\n".join(model_definitions)
        return full_content
